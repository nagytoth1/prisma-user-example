pipeline {
    agent any

    environment {
        NODE_ENV = 'production'
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-key-nagytoth')
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_REPOSITORY = 'nagytoth/react-jenkins-example'
        DOCKER_IMAGE_TAG = 'latest'
    }

    stages {
        stage('Cloning Git repo') {
            steps {
                // Cloning from Gitlab
                git branch:'main', url: 'git@gitlabe1.ext.net.nokia.com:ntas-summer-program-2024/users-example-app.git', credentialsId: 'jenkins-key-nagytoth-wsl'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                // Install npm dependencies
                sh 'npm install --omit dev'
            }
        }
        
        stage('Build') {
            steps {
                sh 'npm install'
                sh 'npm run build'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    sh "docker build -t ${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}:${DOCKER_IMAGE_TAG} ."
                }
            }
        }

        stage('Push Docker Image') {
            agent any
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerHub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
                sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPassword}"
                sh 'docker push shanem/spring-petclinic:latest'
                }
            }
        }

        // stage('Cleanup'){
        //     sh "docker rmi -f ${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}:${DOCKER_IMAGE_TAG}"
        // }
    }

    post {
        // always {
        //     // Clean up Docker images to save space on Jenkins agent
        //     sh 'docker system prune -f'
        // }
        success {
            echo 'Build and deploy succeeded!'
        }
        failure {
            echo 'Build or deploy failed.'
        }
    }
}
